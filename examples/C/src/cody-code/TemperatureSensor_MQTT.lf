/**
 * This example extends the TemperatureSensor example by adding MQTT support.
 * We assume that the user has a working MQTT broker.
 * We ask Cody to import the MQTT subscriber and oublisher from the library.
 * 
 * The developper has little knowledge about the Lingua Franca language.

 * 
 * @author Moez Ben Hajhmida
 */

 target C

 /**
   * User generated prompt:
   *
   * import the MQTT subscriber and publisher from the library
   */

/**
   * Cody generated prompt:
   *
   * import MQTTSubscriber from lib/MQTTSubscriber.lf"
   * import MQTTPublisher from "lib/MQTTPublisher.lf"
   */

// User fixed code:
import MQTTSubscriber from "../mqtt/lib/MQTTSubscriber.lf"
import MQTTPublisher from "../mqtt/lib/MQTTPublisher.lf"



reactor TempSensor {
  output temp: int

  reaction(startup) -> temp {=
    srand(time(NULL)); 
  =}

  timer myTimer(0, 1 sec)
  reaction(myTimer) -> temp {=
    int randomValue = rand() % 31 + 5;
    lf_set(temp, randomValue);
  =}
}

/**
   * User generated prompt:
   *
   * Add a reactor "Publisher" that Instanciate the MQTT publisher,
   * and publishes the recieved input.
   */

   // GENERATED BY Cody
   reactor Publisher {
     input in: int
     
     pub = new MQTTPublisher(topic="temp_topic", address="tcp://localhost:1883")
     
     reaction(in) {=
      // GENERATED BY Cody
      pub.in = in->value
          
     =}
   }

   /**
   * User generated prompt:
   *
   * Add a reactor "Subscriber" that Instanciate the MQTT subscriber,
   * and sends the recieved messages to the output.
   */


/**
   * User generated prompt:
   *
   * Add a reactor "Print" that prints the recieved input.
   */

   // GENERATED BY Cody
reactor Subscriber {
  sub = new MQTTSubscriber(topic="temp_topic", address="tcp://localhost:1883")

  output out: int

  reaction(sub.message) {=
    self->out = sub.message->value
  =}
}



// GENERATED BY Cody
reactor Print {
  input in: int
  
  reaction(in) {=
    printf("%d\n", in->value); 
  =}
}


/**
   * User generated prompt:
   *
   * Add a reactor "Main" that instantiates all reactors and connects them.
   */

   // GENERATED BY Cody
// GENERATED BY Cody
// reactor Main {
//   tempSensor = new TempSensor()
//   subscriber = new Subscriber()
//   print = new Print()

//   tempSensor.temp -> subscriber.null
//   subscriber.out -> print.in
// }


/**
   * User prompt, again:
   *
   * Add a reactor "Main" that instantiates the Subscriber, Publisher, Print, and TempSensor reactors and connects them.
   */

